"""
Django settings for opsweb project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'z+3e_x*puuimrvgf5uj%oco1%zw@(a-45%7j7778rq1dwi4_4u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboard',
    'accounts',
    'resources',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'opsweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'opsweb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django',
        'USER':'root',
        'PASSWORD':'root123',
        'HOST':'127.0.0.1',
        'PORT':3306,
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

#LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'

#TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR,'static'),
)

# 日志功能
LOGGING = {
    "version":1.0,
    'disable_existing_logger':False,
    
    # 定义不同级别的日志
    "loggers":{
        # debu模式，适用于开发环境,便于排错
        "opsweb":{
            "level":"DEBUG",
            "handlers":["opsweb_file_handle"],
            'propagate':True,
        },
        # 定义django内部的错误输出，如：语法错误，请求错误
        "django":{
            "level":"DEBUG",
            "handlers":["django_handle"],
            'propagate':True,
        },
        # 定义错误日志，级别比较重要的发邮件.
        "report":{
            "level":"ERROR",
            "handlers":["mail"],
            'propagate':True,
        }
    },

    # 具体处理日志的模块
    "handlers":{
        # 自定义的日志记录
        "opsweb_file_handle":{
            "class":"logging.FileHandler",
            "filename":os.path.join(BASE_DIR, "logs", "opsweb_debug.log"),
            "formatter":"opsweb"
        },
        # django内置模块，用于排查内部错误。
        "django_handle":{
            "class":"logging.FileHandler",
            "filename":os.path.join(BASE_DIR, "logs", "django_debug.log"),
            "formatter":"opsweb"
        },   
        # django 内置handler,日志出现400 500类的请求会被记录
        'django_request_handler':{
            'level':'DEBUG',
            "class":"logging.handlers.RotatingFileHandler",
            "filename":os.path.join(BASE_DIR, "logs", "request.log"),
            'maxBytes': 1024*1024*5,
            'backupCount':5,
            "formatter":"opsweb",
        },
        # 定义邮件信息
        "mail":{
            "class":"logging.handlers.SMTPHandler",
            "level":"ERROR",
            "formatter":"simple",
            "mailhost":("smtp.163.com",25),
            "fromaddr":"deng0@163.com",               # 发件人
            "toaddrs":["deng@16801.com"],               # 收件人
            "subject":"SRE mail",                             # 邮件主题
            "credentials":("deng0@163.com","xxxx") # 发件人的用户名和密码
        },
    },
    # 定义日志格式
    'formatters':{
        'opsweb':{
            'format': '%(levelname)s %(asctime)s %(pathname)s %(filename)s %(module)s %(funcName)s %(lineno)d: %(message)s'
            #'format':'%(asctime)s - %(pathname)s:%(lineno)d[%(levelname)s] - %(message)s'
            #'format':'[%(asctime)s] [%(process)d] [%(thread)d] [%(filename)16s:%(lineno)4d] [%(levelname)-6s] %(message)s'
        },
        'simple':{
            'format': '%(asctime)s %(levelname)s %(message)s'
        }
    },
}
